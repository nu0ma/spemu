name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'

      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    needs: security_scan
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.semantic.outputs.new_release_version }}
      release_created: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          semantic_version: 22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          VERSION=$(git describe --tags --always --dirty)
          if [ "$GOOS" = "windows" ]; then
            go build -ldflags "-X main.Version=$VERSION" -o dist/spemu-${{ matrix.goos }}-${{ matrix.goarch }}.exe .
          else
            go build -ldflags "-X main.Version=$VERSION" -o dist/spemu-${{ matrix.goos }}-${{ matrix.goarch }} .
          fi

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="v${{ needs.release.outputs.tag_name }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            asset_name="spemu-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            asset_name="spemu-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi
          gh release upload "$tag_name" "dist/$asset_name" --clobber